<?php

/**
 * @file
 * The Anonymous Subscriptions module allows a non-registered user to your site
 * the ability to register for email notifications to certain pre-defined
 * content types.
 *
 * These notifications are optional on the pre-defined content types with a flag
 * displayed as to whether to send e-mails or not.
 *
 * There is currently only one subscription list per site, future functionality
 * will add the ability for users to subscribe per content type,
 * and/or per node.
 */

use Drupal\Core\Url;
use Drupal\anonymous_subscriptions\Form\SettingsForm;
use Drupal\node\NodeInterface;
use Drupal\anonymous_subscriptions\Entity\Subscription;

/**
 * Implements hook_help().
 */
function anonymous_subscriptions_help($route_name) {
  switch ($route_name) {
    case 'help.page.anonymous_subscriptions':
      $output = '<p>';
      $output .= '<p>' . t('Anonymous Subscriptions allows anonymous visitors to your site to subscribe to updates to nodes. The <a href="@anon">anonymous subscriptions administration page</a> allows you to configure options including whether emails need to be verified and which content types the option should appear to send notifications for.', [
          '@anon' => Url::fromRoute('anonymous_subscriptions.settings_form'),
        ]);
      $output .= '</p>';

      return $output;
  }

}

/**
 * Implements hook_theme().
 */
function anonymous_subscriptions_theme() {
  return [
    'anonymous_subscriptions_message' => [
      'variables' => [
        'title' => FALSE,
        'message' => FALSE,
        'link' => FALSE,
      ],
      'template' => 'anonymous-subscriptions-message',
    ],
  ];
}

/**
 * Implements hook_mail()
 */
function anonymous_subscriptions_mail($key, &$message, $params) {
  switch ($key) {
    case 'anonymous_subscriptions_key':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * This is used to display the checkbox as to whether or not send the
 * notification for this particular node.
 */
function anonymous_subscriptions_form_node_form_alter(&$form, $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();
  $config = \Drupal::config(SettingsForm::$configName);
  $valid_types = $config->get('anonymous_subscriptions_node_types') ?: [];
  if (!empty($valid_types[$node->getType()])) {
    /** @var \Drupal\Core\Session\AccountInterface $current_user */
    $current_user = \Drupal::service('current_user');
    $form['options']['send_emails'] = [
      '#type' => 'checkbox',
      '#title' => t('Send e-mails to subscribers'),
      '#default_value' => $config->get('anonymous_subscriptions_send_default'),
      '#group' => 'options',
      '#access' => $current_user->hasPermission('alter anonymous_subscriptions') || $current_user->hasPermission('administer anonymous_subscriptions'),
      '#weight' => 10,
    ];
    array_unshift($form['actions']['submit']['#submit'], 'anonymous_subscriptions_form_node_form_alter_submit');
  }
}

function anonymous_subscriptions_form_node_form_alter_submit(&$form, &$form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  // Saving send email flag to temporary private storage.
  $tempStore = \Drupal::service('tempstore.private')->get('anonymous_subscriptions');
  $id = $node->id() ?: 'new';
  $tempStore->set('send_mail:' . $node->getType() . ':' . $id, $form_state->getValue('send_emails'));
}

/**
 * Implements hook_node_insert().
 */
function anonymous_subscriptions_node_insert($node) {
  // Resaving send_mail value for new nodes.
  $tempStore = \Drupal::service('tempstore.private')->get('anonymous_subscriptions');
  $tempStore->set('send_mail:' . $node->getType() . ':' . $node->id(), $tempStore->get('send_mail:' . $node->getType() . ':new'));

  if (_anonymous_subscriptions_should_send($node)) {
    _anonymous_subscriptions_add_pending_emails($node);
  }
}

/**
 * Implements hook_node_update().
 */
function anonymous_subscriptions_node_update($node) {
  if (_anonymous_subscriptions_should_send($node)) {
    _anonymous_subscriptions_add_pending_emails($node);
  }
}

/**
 * Function used to determine whether the email should be sent
 * to the subscribers.
 *
 * This will check the status of the node currently and compare
 * it to the original one.
 *
 * @param $node
 *  The node object that specifies to the email
 *
 * @return bool
 *  returns true or false depending if an email should be sent
 */
function _anonymous_subscriptions_should_send(NodeInterface $node) {
  /** @var \Drupal\Core\TempStore\PrivateTempStore $tempStore */
  $tempStore = \Drupal::service('tempstore.private')->get('anonymous_subscriptions');
  $send_mail = $tempStore->get('send_mail:' . $node->getType() . ':' . $node->id());

  $type = $node->getType();
  $config = \Drupal::config(SettingsForm::$configName);
  $valid_types = $config->get('anonymous_subscriptions_node_types') ?: [];
  if (!empty($valid_types[$type])
    && $node->isPublished() &&
    $send_mail == 1
    ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function used to add pending emails to be sent to the database
 * so they can be processed via cron at a later time.
 *
 * @param $node
 *  The node object that specifies to the email
 */
function _anonymous_subscriptions_add_pending_emails(NodeInterface $node) {
  $query = \Drupal::entityQuery('anonymous_subscription');
  $query->condition('verified', 1);

  $group = $query->orConditionGroup()
    ->notExists('type')
    ->condition('type', $node->getType());
  $query->condition($group);
  $ids = $query->execute();
  $subscriptions = Subscription::loadMultiple($ids);

  /** @var \Drupal\Core\Utility\Token $token */
  $token = \Drupal::service('token');
  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get('anonymous_subscriptions_queue');
  /** @var \Drupal\anonymous_subscriptions\DefaultService $subscriberService */
  $subscriberService = \Drupal::service('anonymous_subscriptions.default');
  $config = \Drupal::config(SettingsForm::$configName);

  $original_subject = $config->get('anonymous_subscriptions_subject_text');
  $original_body = $config->get('anonymous_subscriptions_body_text');

  $count = 0;
  /** @var Subscription $subscription */
  foreach ($subscriptions as $subscription) {
    $email = $subscription->email->value;
    $subject = $token->replace($original_subject, ['node' => $node]);
    $body = $token->replace($original_body, ['node' => $node]);
    $body .= t("\n\nTo unsubscribe please visit url @unsubscribe_url\nTo remove all your subscription visit url @unsubscribe_all_url", [
      '@unsubscribe_url' => $subscriberService->getUnsubscribeUrl($subscription),
      '@unsubscribe_all_url' => $subscriberService->getUnsubscribeUrl($subscription, TRUE),
    ]);

    $fields = array(
      'email' => $email,
      'subject' => $subject,
      'body' => $body,
      'nid' => $node->id(),
    );

    $queue->createItem($fields);
    $log_text = t("Adding pending email to :email with subject :subject for nid :nid", [
      ':email' => $fields['email'],
      ':subject' => $fields['subject'],
      ':nid' => $fields['nid']]);
    \Drupal::logger('anonymous_subscriptions')->notice($log_text);
    $count++;
  }

  if ($count > 0) {
    $message = t('Queuing @count emails to be sent to your subscribers.', [
      '@count' => $count,
    ]);
  } else {
    $message = t("No emails to be sent, there are no subscribers.");
  }
  \Drupal::messenger()->addMessage($message);
}

/**
 * Implements hook_module_implements_alter().
 */
function anonymous_subscriptions_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'node_insert') {
    // Move anonymous_subscriptions_node_insert() to the end of the list.
    $group = $implementations['anonymous_subscriptions'];
    unset($implementations['anonymous_subscriptions']);
    $implementations['anonymous_subscriptions'] = $group;
  }
}
