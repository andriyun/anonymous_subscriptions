<?php
/**
 * @file
 * Anonymous Subscriptions module is used to allow anonymous users to register
 * for notifications or updates to nodes based on specific content types.
 *
 */

define("SUBSCRIPTION_TABLE", "anonymous_subscriptions_emails");
define("PENDING_EMAIL_TABLE", "anonymous_subscriptions_pending_emails");
define("MODULE_NAME", "anonymous_subscription");
define("QUEUE_NAME", "anonymous_subscriptions_queue");
define("VALID_TYPES", "anonymous_subscriptions_node_types");

/**
 * Implements hook_permission().
 */
function anonymous_subscriptions_permission() {
  return array(
    'administer subscriptions' => array(
      'description' => t('Configure the Subscription settings.'),
      'title' => t('Administer Subscription Settings'),
    ),
    'alter subscriptions' => array(
      'description' => t('Change Subscription settings on node form.'),
      'title' => t('Change Subscription settings on node form'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function anonymous_subscriptions_help($path, $arg) {
  switch ($path) {
    case 'admin/help#anonymous_subscriptions':
      return '<p>' . t('Anonymous Subscriptions allows anonymous visitors to your site to subscribe to updates to nodes. The <a href="@anon">anonymous subscriptions administration page</a> allows you to configure options including whether emails need to be verified and which content types the option should appear to send notifications for.', array('@anon' => url('admin/config/content/anonymous_subscriptions'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function anonymous_subscriptions_menu() {
  $items = array();

  $items['admin/config/content/anonymous_subscriptions'] = array(
    'title' => 'Anonymous Subscriptions',
    'description' => 'Subscription integration settings and configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_subscriptions_settings'),
    'access arguments' => array('administer subscriptions'),
    'file' => 'anonymous_subscriptions.admin.inc',
  );

  $items['admin/config/content/anonymous_subscriptions/settings'] = array(
    'title' => 'Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['subscription/%/remove'] = array(
    'page callback' => '_anonymous_subscriptions_remove_pending',
    'page arguments' => array(1),
    'access arguments' => array('alter subscriptions'),
    'access callback' => '_anonymous_subscriptions_token_check',
  );

  $items['subscription/%/%/verify'] = array(
    'page callback' => '_anonymous_subscriptions_verify_email',
    'page arguments' => array(1, 2),
    'access arguments' => array('view published content'),
  );

  $items['subscription/%/%/unsubscribe'] = array(
    'page callback' => '_anonymous_subscriptions_unsubscribe',
    'page arguments' => array(1, 2),
    'access arguments' => array('view published content'),
  );

  return $items;
}

/**
 * Custom access callback
 */
function _anonymous_subscriptions_token_check() {
  if (!user_access('alter subscriptions') && empty($_GET['tok']) || !drupal_valid_token($_GET['tok'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function anonymous_subscriptions_block_info() {
  $blocks['anon_subscriptions_email_block'] = array(
    // The name that will appear in the block list.
    'info' => t('Anonymous Subscription Email Block'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function anonymous_subscriptions_block_view($delta = '') {
  switch ($delta) {
    case 'anon_subscriptions_email_block':
      $block['subject'] = t('E-mail:');
      if (user_access('access content')) {
        // Retrieve and process data here.
        $the_form = drupal_get_form('anonymous_subscriptions_form');
        $block['content'] = drupal_render($the_form);

      }

    return $block;
  }
}

/**
 * Implements hook_form().
 *
 * Block used to display form to register for subscription
 */
function anonymous_subscriptions_form() {
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email:'),
    '#default_value' => '',
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['#validate'][] = 'anonymous_subscriptions_form_validate';
  $form['#submit'][] = 'anonymous_subscriptions_form_submit';
  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * Validates the subscription form.
 */
function anonymous_subscriptions_form_validate($form, &$form_state) {
  $email = $form_state['values']['email'];
  if ($email && !valid_email_address($email)) {
    form_set_error('email', 'You must enter a valid email address.');
  } else {
    $result = db_select(SUBSCRIPTION_TABLE, 's')
      ->fields('s')
      ->condition('email', trim($email),'=')
      ->execute()
      ->fetchAssoc();
    if($result) {
      form_set_error('email', 'You are already subscribed.');
    }
  }
}

/**
 * Implements hook_form_submit().
 *
 * Handles the registration form submission generating a code and
 * storing that in the database table as well as the default verification
 * status.
 */
function anonymous_subscriptions_form_submit($form, &$form_state) {
  global $base_url;
  $verification_required = variable_get('anonymous_subscriptions_verify', TRUE);
  $verify_int = (int)(!$verification_required);
  $email = $form['email']['#value'];
  $email = trim($email);
  $code = substr(md5(uniqid(mt_rand(), true)), 0, 8);;

  db_insert(SUBSCRIPTION_TABLE)
    ->fields(array(
      'email' => $email,
      'verified' => $verify_int,
      'code' => $code,
    ))
    ->execute();


  if($verification_required) {
    drupal_set_message("You will need to verify your email address.");
    $subject = variable_get('site_name', "")." - subscription";
    $body = array("To confirm your subscription please visit the following url ".$base_url."/subscription/".$code."/".$email."/verify");
    _anonymous_subscriptions_send_email($email, $subject, $body);
  } else {
    drupal_set_message("You are now subscribed to updates.");
    $subject = variable_get('site_name', "")." - subscription";
    $body = array("You are now subscribed to recieve updates from ".$base_url, "To unsubscribe please visit ".$base_url."/subscription/".$code."/".$email."/unsubscribe");
    _anonymous_subscriptions_send_email($email, $subject, $body);
  }
}

/**
 * Function called to remove pending emails from the
 * queue.
 *
 * @param $nid
 * The nid to remove pending emails for
 *
 */
function _anonymous_subscriptions_remove_pending($nid) {
  $queue = DrupalQueue::get(QUEUE_NAME);
  $count = 0;
  while($item = $queue->claimItem()) {
    $email = $item->data;
    if($email['nid'] == $nid) {
      // Log some information in case we need to verify that an email was sent then send the email.
      watchdog(MODULE_NAME, "Removing email to [" . $email['email'] . "] with subject [" . $email['subject'] . "]", NULL, WATCHDOG_INFO, NULL);

      $queue->deleteItem($item);
      $count++;
    }
  }

  drupal_set_message("Removed ".$count." pending subscriptions.");
  drupal_goto("/node/".$nid);
}

/**
 * Function called when the verify link is selected.
 * If all details are correct changes verified status
 * from 0 to 1 allowing that user to be sent subscription notifications.
 *
 * @param $code
 *  The verification code used to verify a user
 * @param $email
 *  The email address of the user
 *
 */
function _anonymous_subscriptions_verify_email($code, $email) {
  global $base_url;

  // Get the record based on the verification code and email address
  $result = db_select(SUBSCRIPTION_TABLE, 's')
    ->fields('s')
    ->condition('email', trim($email),'=')
    ->condition('code', trim($code),'=')
    ->execute()
    ->fetchAssoc();

  if($result) {
    // If the result matches, update the email address to be verified
    db_update(SUBSCRIPTION_TABLE)
      ->fields(array(
        'verified' => 1,
      ))
      ->condition('email', trim($email), '=')
      ->execute();

    drupal_set_message("Your email has been verified, you will now receive updates.");

    // Send out another email informing the user that they are not verified.
    $subject = variable_get('site_name', "")." - subscription";
    $body = array("You are now subscribed to recieve updates from ".$base_url, "To unsubscribe please visit ".$base_url."/subscription/".$code."/".$email."/unsubscribe");
    _anonymous_subscriptions_send_email($email, $subject, $body);
  }

  // Redirect to homepage??
  drupal_goto("/");
}


/**
 * Function called when a user is unsubscribing.
 *
 * @param $code
 *  The verification code used to verify a user
 * @param $email
 *  The email address of the user
 */
function _anonymous_subscriptions_unsubscribe($code, $email) {

  // Verify that the email address and verification code are correct
  $result = db_select(SUBSCRIPTION_TABLE, 's')
    ->fields('s')
    ->condition('email', trim($email),'=')
    ->condition('code', trim($code),'=')
    ->execute()
    ->fetchAssoc();
  if($result) {
    // If details are correct then remove the email from the database
    db_delete(SUBSCRIPTION_TABLE)
      ->condition('email', trim($email))
      ->execute();

    drupal_set_message("You have been unsubscribed from updates.");
  }

  // Redirect to homepage??
  drupal_goto("/");
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * This is used to display the checkbox as to whether or not send the notification
 * for this particular node.
 */
function anonymous_subscriptions_form_node_form_alter(&$form, $form_state, $form_id) {
  $type = $form['type']['#value'];
  $valid_types = variable_get(VALID_TYPES, array());
  if(in_array($type, $valid_types)) {
    $form['options']['send_emails'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send e-mails to subscribers'),
      '#default_value' => variable_get('anonymous_subscriptions_send_default', FALSE),
      '#access' => user_access('alter subscriptions') || user_access('administer subscriptions'),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * This is used to display the checkbox as to whether or not send the notification
 * for this particular node on the workbench block.
 */
function anonymous_subscriptions_form_workbench_moderation_moderate_form_alter(&$form, $form_state, $form_id) {
  $node = $form['node']['#value'];
  $type = $node->type;
  $valid_types = variable_get(VALID_TYPES, array());
  if(in_array($type, $valid_types)) {
    $form['send_emails'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send e-mails to subscribers'),
      '#default_value' => variable_get('anonymous_subscriptions_send_default', FALSE),
      '#access' => user_access('alter subscriptions') || user_access('administer subscriptions'),
    );
    $form['#submit'][] = 'anonymous_subscriptions_workbench_moderation_form_submit';
  }
}

/**
 * Implements hook_node_insert().
 */
function anonymous_subscriptions_node_insert($node) {
  anonymous_subscriptions_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function anonymous_subscriptions_node_update($node) {
  if(_anonymous_subscriptions_should_send($node)) {
    _anonymous_subscriptions_add_pending_emails($node);
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * Workbench is its own little thing of beauty so it needs
 * its own special implementation.
 * In here we get the value from our form, then add it to the fresh node_load
 * object, then continue with how we would normally check to send emails.
 */
function anonymous_subscriptions_workbench_moderation_form_submit(&$form, &$form_state) {
  $send_email = $form['send_emails']['#value'];
  $to_state = $form['state']['#value'];
  $nid = $form['node']['#value']->nid;
  $node = node_load($nid);
  $node->send_emails = $send_email;
  if(workbench_moderation_state_published() == $to_state) {
    //Set the node status to published so our subscription checker sees this as published
    $node->status = 1;
  }
  if(_anonymous_subscriptions_should_send_workbench($node)) {
    _anonymous_subscriptions_add_pending_emails($node);
  }
}

/**
 * Function used to determine whether the email should be sent
 * to the subscribers form workbench.
 *
 * This will check the status of the node currently and compare
 * it to the original one.
 *
 * @param $node
 *  The node object that specifies to the email
 *
 * @return bool
 *  returns true or false depending if an email should be sent
 */
function _anonymous_subscriptions_should_send_workbench($node) {
  $type = $node->type;
  $original = array();
  if(isset($node->original)) {
    $original = $node->original;
  }
  $valid_types = variable_get(VALID_TYPES, array());
  if(in_array($type, $valid_types) && $node->status == 1 && isset($node->send_emails) &&
    $node->send_emails == 1 && (empty($original) || $original->status == 0)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function used to determine whether the email should be sent
 * to the subscribers.
 *
 * This will check the status of the node currently and compare
 * it to the original one.
 *
 * @param $node
 *  The node object that specifies to the email
 *
 * @return bool
 *  returns true or false depending if an email should be sent
 */
function _anonymous_subscriptions_should_send($node) {
  $type = $node->type;
  $original = array();
  if(isset($node->original)) {
    $original = $node->original;
  }
  $valid_types = variable_get(VALID_TYPES, array());
  if(in_array($type, $valid_types) && $node->status == 1 && isset($node->send_emails) &&
    $node->send_emails == 1 && (empty($original) || $original->status == 0)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function used to add pending emails to be sent to the database
 * so they can be processed via cron at a later time.
 *
 * @param $node
 *  The node object that specifies to the email
 */
function _anonymous_subscriptions_add_pending_emails($node) {
  global $base_url;
  $original_base_url = $base_url;
  $result = db_select(SUBSCRIPTION_TABLE, 'e')
    ->fields('e', array('email', 'code'))
    ->condition('verified', 1,'=')
    ->execute()
    ->fetchAll();

  $new_base_url = variable_get('anonymous_subscriptions_site_url');
  $new_base_url = token_replace($new_base_url);
  $base_url = $new_base_url;

  $queue = DrupalQueue::get(QUEUE_NAME);

  $original_subject = variable_get('anonymous_subscriptions_subject_text');
  $original_body = variable_get('anonymous_subscriptions_body_text');

  $count = 0;
  foreach ($result as $email) {
    $body = $original_body;
    $body .= "\nTo unsubscribe please visit ".$new_base_url."/subscription/".$email->code."/".$email->email."/unsubscribe";

    $subject = token_replace($original_subject, array('node' => $node));
    $body = token_replace($body, array('node' => $node));

    $fields = array(
      'email' => $email->email,
      'subject' => $subject,
      'body' => array($body),
      'nid' => $node->nid,
    );

    $queue->createItem($fields);
    $count++;
  }
  $base_url = $original_base_url;
  //TODO: Lets run the hook_cron function to take care of the first batch (remove before final).
  //_anonymous_subscriptions_process_queue();

  drupal_set_message("Sending emails to ".$count." subscriptions. <a href='/subscription/".$node->nid."/remove?tok=".drupal_get_token()."'>Click here to remove pending emails</a>.");
}

/*
 * Implements hook_cron_queue_info().
 */
function anonymous_subscriptions_cron_queue_info(){
  $queues[QUEUE_NAME] = array(
    'worker callback' => '_anonymous_subscriptions_process_queue',
  );
  return $queues;
}

/**
 * Implements hook_cron().
 *
 * This will collect the selected number of emails to be sent at any one
 * time and perform this on cron run.
 */
function _anonymous_subscriptions_process_queue() {
  $max_to_send = variable_get('anonymous_subscriptions_max_to_send', 200);
  // search for expiration date interval
  $queue = DrupalQueue::get(QUEUE_NAME);
  $count = 0;
  while($item = $queue->claimItem()) {
    if($count > $max_to_send) {
      break;
    }
    $email = $item->data;
    // Log some information in case we need to verify that an email was sent then send the email.
    watchdog(MODULE_NAME, "Sending email to [".$email['email']."] with subject [".$email['subject']."]", NULL, WATCHDOG_INFO, NULL);
    _anonymous_subscriptions_send_email($email['email'], $email['subject'], $email['body']);

    $queue->deleteItem($item);
    $count++;
  }
}

/**
 * Function used to send emails
 * @param $to
 *  The email address to send the email to
 * @param $subject
 *  The Subject text to be sent in the email
 * @param $body
 *  The Body text to be sent in the email
 */
function _anonymous_subscriptions_send_email($to, $subject, $body) {
  $message = drupal_mail('anonymous_subscriptions', 'key', $to, language_default(), array(), NULL, FALSE);
  $message['subject'] = $subject;
  $message['body'] = $body;
  // Retrieve the responsible implementation for this message.
  $system = drupal_mail_system('anonymous_subscriptions', 'key');
  // Format the message body.
  $message = $system->format($message);
  // Send e-mail.
  $message['result'] = $system->mail($message);
}
